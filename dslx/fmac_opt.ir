package fmac

file_number 0 "/home/proppy/xls-env/share/xls/xls/dslx/ir_convert/ir_converter_main.runfiles/com_google_xls/xls/dslx/stdlib/std.x"
file_number 1 "/home/proppy/xls-env/share/xls/xls/dslx/ir_convert/ir_converter_main.runfiles/com_google_xls/xls/dslx/stdlib/apfloat.x"
file_number 2 "fmac.x"

chan fmac__input_a((bits[1], bits[8], bits[7]), id=0, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan fmac__input_b((bits[1], bits[8], bits[7]), id=1, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan fmac__reset(bits[1], id=2, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan fmac__output((bits[1], bits[8], bits[7]), id=3, kind=streaming, ops=send_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

top proc __fmac__fmac_0_next(__token: token, __state_0: bits[1], __state_1: bits[8], __state_2: bits[7], init={0, 0, 0}) {
  receive.464: (token, (bits[1], bits[8], bits[7])) = receive(__token, channel=fmac__input_a, id=464)
  receive.468: (token, (bits[1], bits[8], bits[7])) = receive(__token, channel=fmac__input_b, id=468)
  a: (bits[1], bits[8], bits[7]) = tuple_index(receive.464, index=1, id=467, pos=[(2,41,19)])
  b: (bits[1], bits[8], bits[7]) = tuple_index(receive.468, index=1, id=471, pos=[(2,42,19)])
  literal.1131: bits[1] = literal(value=0, id=1131, pos=[(1,2080,23)])
  a_fraction__3: bits[7] = tuple_index(a, index=2, id=1132, pos=[(1,1982,21)])
  a_bexp__4: bits[8] = tuple_index(a, index=1, id=1133, pos=[(1,1986,23)])
  literal.1134: bits[8] = literal(value=0, id=1134, pos=[(1,1986,43)])
  literal.1533: bits[1] = literal(value=0, id=1533, pos=[(1,2080,23)])
  b_fraction__3: bits[7] = tuple_index(b, index=2, id=1135, pos=[(1,1983,21)])
  b_bexp__4: bits[8] = tuple_index(b, index=1, id=1136, pos=[(1,1987,23)])
  literal.1544: bits[8] = literal(value=0, id=1544, pos=[(1,1986,43)])
  concat.1137: bits[8] = concat(literal.1131, a_fraction__3, id=1137, pos=[(1,2080,23)])
  literal.1138: bits[8] = literal(value=128, id=1138, pos=[(1,1982,76)])
  ne.1139: bits[1] = ne(a_bexp__4, literal.1134, id=1139, pos=[(1,1986,19)])
  concat.1140: bits[8] = concat(literal.1533, b_fraction__3, id=1140, pos=[(1,2080,23)])
  literal.1549: bits[8] = literal(value=128, id=1549, pos=[(1,1982,76)])
  ne.1141: bits[1] = ne(b_bexp__4, literal.1544, id=1141, pos=[(1,1987,19)])
  a_fraction__4: bits[8] = or(concat.1137, literal.1138, id=1142, pos=[(1,1982,53)])
  sign_ext.1143: bits[8] = sign_ext(ne.1139, new_bit_count=8, id=1143, pos=[(1,1986,19)])
  b_fraction__4: bits[8] = or(concat.1140, literal.1549, id=1144, pos=[(1,1983,53)])
  sign_ext.1145: bits[8] = sign_ext(ne.1141, new_bit_count=8, id=1145, pos=[(1,1987,19)])
  a_fraction__5: bits[8] = and(a_fraction__4, sign_ext.1143, id=1146, pos=[(1,1986,19)])
  b_fraction__5: bits[8] = and(b_fraction__4, sign_ext.1145, id=1147, pos=[(1,1987,19)])
  literal.1534: bits[1] = literal(value=0, id=1534, pos=[(1,2080,23)])
  literal.1535: bits[1] = literal(value=0, id=1535, pos=[(1,2080,23)])
  fraction: bits[16] = umul(a_fraction__5, b_fraction__5, id=1148, pos=[(1,1988,28)])
  concat.1149: bits[9] = concat(literal.1534, a_bexp__4, id=1149, pos=[(1,2080,23)])
  concat.1150: bits[9] = concat(literal.1535, b_bexp__4, id=1150, pos=[(1,2080,23)])
  literal.1151: bits[9] = literal(value=0, id=1151, pos=[(1,2080,23)])
  bit_slice.1152: bits[1] = bit_slice(fraction, start=15, width=1, id=1152, pos=[(1,1991,31)])
  literal.1545: bits[8] = literal(value=0, id=1545, pos=[(1,1986,43)])
  literal.1546: bits[8] = literal(value=0, id=1546, pos=[(1,1986,43)])
  literal.1536: bits[1] = literal(value=0, id=1536, pos=[(1,2080,23)])
  add.1153: bits[9] = add(concat.1149, concat.1150, id=1153, pos=[(1,1997,11)])
  concat.1154: bits[10] = concat(literal.1151, bit_slice.1152, id=1154, pos=[(1,2080,23)])
  literal.1155: bits[10] = literal(value=897, id=1155, pos=[(1,1996,77)])
  eq.1156: bits[1] = eq(a_bexp__4, literal.1545, id=1156, pos=[(1,1999,16)])
  eq.1157: bits[1] = eq(b_bexp__4, literal.1546, id=1157, pos=[(1,1999,44)])
  bexp__11: bits[10] = concat(literal.1536, add.1153, id=1158, pos=[(1,1997,11)])
  bexp__12: bits[10] = add(concat.1154, literal.1155, id=1159, pos=[(1,1997,11)])
  nor.1160: bits[1] = nor(eq.1156, eq.1157, id=1160, pos=[(1,1999,6)])
  max_exp: bits[8] = literal(value=255, id=1166, pos=[(1,101,27)])
  literal.1168: bits[7] = literal(value=0, id=1168, pos=[(1,101,73)])
  max_exp__1: bits[8] = literal(value=255, id=1555, pos=[(1,101,27)])
  literal.1559: bits[7] = literal(value=0, id=1559, pos=[(1,101,73)])
  bexp__13: bits[10] = add(bexp__11, bexp__12, id=1161, pos=[(1,1997,11)])
  sign_ext.1162: bits[10] = sign_ext(nor.1160, new_bit_count=10, id=1162, pos=[(1,1999,6)])
  eq.1174: bits[1] = eq(a_bexp__4, max_exp, id=1174, pos=[(1,101,10)])
  eq.1175: bits[1] = eq(a_fraction__3, literal.1168, id=1175, pos=[(1,101,52)])
  eq.1176: bits[1] = eq(b_bexp__4, max_exp__1, id=1176, pos=[(1,101,10)])
  eq.1177: bits[1] = eq(b_fraction__3, literal.1559, id=1177, pos=[(1,101,52)])
  bexp__14: bits[10] = and(bexp__13, sign_ext.1162, id=1163, pos=[(1,1999,6)])
  literal.1164: bits[10] = literal(value=0, id=1164, pos=[(1,2009,48)])
  literal.1560: bits[7] = literal(value=0, id=1560, pos=[(1,101,73)])
  literal.1561: bits[7] = literal(value=0, id=1561, pos=[(1,101,73)])
  and.1191: bits[1] = and(eq.1174, eq.1175, id=1191, pos=[(1,101,38)])
  and.1192: bits[1] = and(eq.1176, eq.1177, id=1192, pos=[(1,101,38)])
  sgt.1173: bits[1] = sgt(bexp__14, literal.1164, id=1173, pos=[(1,2011,6)])
  ne.1197: bits[1] = ne(a_fraction__3, literal.1560, id=1197, pos=[(1,70,52)])
  ne.1199: bits[1] = ne(b_fraction__3, literal.1561, id=1199, pos=[(1,70,52)])
  has_0_arg: bits[1] = or(eq.1156, eq.1157, id=1200, pos=[(1,2031,41)])
  has_inf_arg: bits[1] = or(and.1191, and.1192, id=1201, pos=[(1,2033,30)])
  bit_slice.1178: bits[15] = bit_slice(fraction, start=0, width=15, id=1178, pos=[(1,1992,69)])
  literal.1537: bits[1] = literal(value=0, id=1537, pos=[(1,2080,23)])
  bit_slice.1474: bits[9] = bit_slice(bexp__14, start=0, width=9, id=1474, pos=[(1,1999,6)])
  sign_ext.1182: bits[9] = sign_ext(sgt.1173, new_bit_count=9, id=1182, pos=[(1,2011,6)])
  and.1205: bits[1] = and(eq.1174, ne.1197, id=1205, pos=[(1,70,38)])
  and.1206: bits[1] = and(eq.1176, ne.1199, id=1206, pos=[(1,70,38)])
  and.1207: bits[1] = and(has_0_arg, has_inf_arg, id=1207, pos=[(1,2034,48)])
  concat.1193: bits[16] = concat(bit_slice.1178, literal.1537, id=1193, pos=[(1,1992,69)])
  bit_slice.1179: bits[1] = bit_slice(bexp__14, start=9, width=1, id=1179, pos=[(0,276,54)])
  neg.1475: bits[9] = neg(bit_slice.1474, id=1475, pos=[(0,276,69)])
  result_exp__3: bits[9] = and(bit_slice.1474, sign_ext.1182, id=1195, pos=[(1,2011,6)])
  is_result_nan__1: bits[1] = or(and.1205, and.1206, and.1207, id=1212, pos=[(1,2034,34)])
  literal.1554: bits[10] = literal(value=0, id=1554, pos=[(1,2009,48)])
  fraction__1: bits[16] = sel(bit_slice.1152, cases=[concat.1193, fraction], id=1202, pos=[(1,1992,17)])
  sub_exp: bits[9] = sel(bit_slice.1179, cases=[bit_slice.1474, neg.1475], id=1429, pos=[(0,276,49)])
  and_reduce.1204: bits[1] = and_reduce(result_exp__3, id=1204, pos=[(1,2017,38)])
  literal.1538: bits[1] = literal(value=0, id=1538, pos=[(1,2080,23)])
  literal.1547: bits[8] = literal(value=0, id=1547, pos=[(1,1986,43)])
  or.1220: bits[1] = or(is_result_nan__1, has_inf_arg, id=1220, pos=[(1,2035,19)])
  high_exp: bits[9] = literal(value=511, id=1221, pos=[(1,2016,31)])
  literal.1539: bits[1] = literal(value=0, id=1539, pos=[(1,2080,23)])
  is_subnormal: bits[1] = sle(bexp__14, literal.1554, id=1208, pos=[(1,2009,26)])
  shrl.1209: bits[16] = shrl(fraction__1, sub_exp, id=1209, pos=[(1,2013,51)])
  not.1210: bits[1] = not(and_reduce.1204, id=1210, pos=[(1,2017,38)])
  nor.1211: bits[1] = nor(and.1191, and.1192, id=1211, pos=[(1,2023,24)])
  concat.1232: bits[8] = concat(literal.1538, __state_2, id=1232, pos=[(2,45,30)])
  literal.1550: bits[8] = literal(value=128, id=1550, pos=[(1,1982,76)])
  ne.1234: bits[1] = ne(__state_1, literal.1547, id=1234, pos=[(1,2089,15)])
  result_exp__4: bits[9] = sel(or.1220, cases=[result_exp__3, high_exp], id=1225, pos=[(1,2035,19)])
  concat.1236: bits[9] = concat(literal.1539, __state_1, id=1236, pos=[(2,45,30)])
  result_fraction__5: bits[16] = sel(is_subnormal, cases=[fraction__1, shrl.1209], id=1215, pos=[(1,2013,24)])
  sign_ext.1216: bits[16] = sign_ext(not.1210, new_bit_count=16, id=1216, pos=[(1,2017,24)])
  sign_ext.1217: bits[16] = sign_ext(nor.1211, new_bit_count=16, id=1217, pos=[(1,2023,24)])
  wide_c__4: bits[8] = or(concat.1232, literal.1550, id=1237, pos=[(1,2088,47)])
  sign_ext.1238: bits[8] = sign_ext(ne.1234, new_bit_count=8, id=1238, pos=[(1,2089,15)])
  literal.1239: bits[9] = literal(value=25, id=1239, pos=[(2,45,30)])
  ugt.1240: bits[1] = ugt(result_exp__4, concat.1236, id=1240, pos=[(1,2082,31)])
  result_fraction__6: bits[16] = and(result_fraction__5, sign_ext.1216, sign_ext.1217, id=1222, pos=[(1,2023,24)])
  nan_fraction: bits[16] = literal(value=1, id=1223, pos=[(1,2036,41)])
  literal.1565: bits[9] = literal(value=25, id=1565, pos=[(2,45,30)])
  wide_c__3: bits[8] = and(wide_c__4, sign_ext.1238, id=1241, pos=[(1,2089,15)])
  literal.1242: bits[17] = literal(value=0, id=1242, pos=[(1,2095,22)])
  add.1243: bits[9] = add(concat.1236, literal.1239, id=1243, pos=[(2,45,30)])
  greater_exp: bits[9] = sel(ugt.1240, cases=[concat.1236, result_exp__4], id=1244, pos=[(1,2082,20)])
  result_fraction__7: bits[16] = sel(is_result_nan__1, cases=[result_fraction__6, nan_fraction], id=1226, pos=[(1,2037,24)])
  literal.1551: bits[9] = literal(value=0, id=1551, pos=[(1,2080,23)])
  add.1247: bits[9] = add(result_exp__4, literal.1565, id=1247, pos=[(2,45,30)])
  wide_c__2: bits[25] = concat(wide_c__3, literal.1242, id=1248, pos=[(1,2095,22)])
  sub.1249: bits[9] = sub(add.1243, greater_exp, id=1249, pos=[(1,2107,49)])
  wide_ab: bits[25] = concat(result_fraction__7, literal.1551, id=1250, pos=[(1,2094,41)])
  sub.1251: bits[9] = sub(add.1247, greater_exp, id=1251, pos=[(1,2105,50)])
  rshift_c: bits[9] = sub(greater_exp, concat.1236, id=1252, pos=[(1,2099,29)])
  literal.1253: bits[9] = literal(value=24, id=1253, pos=[(1,2109,18)])
  dropped_c: bits[25] = shll(wide_c__2, sub.1249, id=1254, pos=[(1,2107,13)])
  dropped_ab: bits[25] = shll(wide_ab, sub.1251, id=1255, pos=[(1,2105,14)])
  ugt.1256: bits[1] = ugt(rshift_c, literal.1253, id=1256, pos=[(1,2109,18)])
  bit_slice.1257: bits[8] = bit_slice(dropped_c, start=17, width=8, id=1257, pos=[(1,2109,6)])
  bit_slice.1258: bits[16] = bit_slice(dropped_ab, start=9, width=16, id=1258, pos=[(1,2110,30)])
  literal.1259: bits[16] = literal(value=0, id=1259, pos=[(1,2110,30)])
  dropped_c__2: bits[8] = sel(ugt.1256, cases=[bit_slice.1257, wide_c__3], id=1260, pos=[(1,2109,6)])
  literal.1548: bits[8] = literal(value=0, id=1548, pos=[(1,1986,43)])
  rshift_ab: bits[9] = sub(greater_exp, result_exp__4, id=1261, pos=[(1,2098,30)])
  literal.1262: bits[24] = literal(value=0, id=1262, pos=[(2,45,30)])
  ne.1263: bits[1] = ne(bit_slice.1258, literal.1259, id=1263, pos=[(1,2110,30)])
  literal.1568: bits[24] = literal(value=0, id=1568, pos=[(2,45,30)])
  ne.1264: bits[1] = ne(dropped_c__2, literal.1548, id=1264, pos=[(1,2111,28)])
  a_sign__2: bits[1] = tuple_index(a, index=0, id=1213, pos=[(1,2039,21)])
  b_sign__2: bits[1] = tuple_index(b, index=0, id=1214, pos=[(1,2039,31)])
  shifted_ab: bits[25] = shrl(wide_ab, rshift_ab, id=1265, pos=[(1,2100,27)])
  sticky_ab: bits[25] = concat(literal.1262, ne.1263, id=1266, pos=[(2,45,30)])
  shifted_c: bits[25] = shrl(wide_c__2, rshift_c, id=1267, pos=[(1,2101,25)])
  sticky_c: bits[25] = concat(literal.1568, ne.1264, id=1268, pos=[(2,45,30)])
  not.1218: bits[1] = not(is_result_nan__1, id=1218, pos=[(1,2040,20)])
  result_sign__3: bits[1] = xor(a_sign__2, b_sign__2, id=1219, pos=[(1,2039,27)])
  literal.1540: bits[1] = literal(value=0, id=1540, pos=[(1,2080,23)])
  or.1269: bits[25] = or(shifted_ab, sticky_ab, id=1269, pos=[(1,2114,31)])
  literal.1541: bits[1] = literal(value=0, id=1541, pos=[(1,2080,23)])
  or.1270: bits[25] = or(shifted_c, sticky_c, id=1270, pos=[(1,2115,29)])
  result_sign__4: bits[1] = and(not.1218, result_sign__3, id=1224, pos=[(1,2040,20)])
  concat.1273: bits[26] = concat(literal.1540, or.1269, id=1273, pos=[(1,2118,48)])
  concat.1274: bits[26] = concat(literal.1541, or.1270, id=1274, pos=[(1,2119,46)])
  greater_sign: bits[1] = sel(ugt.1240, cases=[__state_0, result_sign__4], id=1275, pos=[(1,2084,21)])
  literal.1276: bits[2] = literal(value=0, id=1276, pos=[(2,45,30)])
  neg.1277: bits[26] = neg(concat.1273, id=1277, pos=[(1,2118,48)])
  literal.1570: bits[2] = literal(value=0, id=1570, pos=[(2,45,30)])
  neg.1278: bits[26] = neg(concat.1274, id=1278, pos=[(1,2119,46)])
  xor.1279: bits[1] = xor(result_sign__4, greater_sign, id=1279, pos=[(1,2118,30)])
  shifted_ab__1: bits[27] = concat(literal.1276, or.1269, id=1280, pos=[(2,45,30)])
  sign_ext.1281: bits[27] = sign_ext(neg.1277, new_bit_count=27, id=1281, pos=[(1,2118,48)])
  xor.1282: bits[1] = xor(__state_0, greater_sign, id=1282, pos=[(1,2119,28)])
  shifted_c__1: bits[27] = concat(literal.1570, or.1270, id=1283, pos=[(2,45,30)])
  sign_ext.1284: bits[27] = sign_ext(neg.1278, new_bit_count=27, id=1284, pos=[(1,2119,46)])
  shifted_ab__2: bits[27] = sel(xor.1279, cases=[shifted_ab__1, sign_ext.1281], id=1285, pos=[(1,2118,19)])
  shifted_c__2: bits[27] = sel(xor.1282, cases=[shifted_c__1, sign_ext.1284], id=1286, pos=[(1,2119,18)])
  sum_fraction: bits[27] = add(shifted_ab__2, shifted_c__2, id=1287, pos=[(1,2122,32)])
  bit_slice.1288: bits[26] = bit_slice(sum_fraction, start=0, width=26, id=1288, pos=[(1,2122,32)])
  bit_slice.1289: bits[1] = bit_slice(sum_fraction, start=26, width=1, id=1289, pos=[(1,2132,23)])
  neg.1290: bits[26] = neg(bit_slice.1288, id=1290, pos=[(1,2132,58)])
  abs_fraction__1: bits[26] = sel(bit_slice.1289, cases=[bit_slice.1288, neg.1290], id=1291, pos=[(1,2132,7)])
  reverse.1292: bits[26] = reverse(abs_fraction__1, id=1292, pos=[(1,2143,26)])
  one_hot.1293: bits[27] = one_hot(reverse.1292, lsb_prio=true, id=1293, pos=[(1,2143,26)])
  encode.1294: bits[5] = encode(one_hot.1293, id=1294, pos=[(1,2143,26)])
  bit_slice.1295: bits[4] = bit_slice(encode.1294, start=1, width=4, id=1295, pos=[(1,2144,30)])
  __stateancel__2: bits[1] = or_reduce(bit_slice.1295, id=1296, pos=[(1,2144,30)])
  __statearry_bit: bits[1] = bit_slice(abs_fraction__1, start=25, width=1, id=1297, pos=[(1,2137,30)])
  literal.1300: bits[21] = literal(value=0, id=1300, pos=[(1,2143,26)])
  not.1298: bits[1] = not(__stateancel__2, id=1298, pos=[(2,45,30)])
  not.1299: bits[1] = not(__statearry_bit, id=1299, pos=[(2,45,30)])
  literal.1569: bits[24] = literal(value=0, id=1569, pos=[(2,45,30)])
  bit_slice.1304: bits[1] = bit_slice(abs_fraction__1, start=0, width=1, id=1304, pos=[(1,2139,53)])
  leading_zeroes: bits[26] = concat(literal.1300, encode.1294, id=1305, pos=[(1,2143,26)])
  literal.1306: bits[26] = literal(value=67108863, id=1306, pos=[(1,2146,39)])
  nor.1301: bits[1] = nor(__statearry_bit, __stateancel__2, id=1301, pos=[(2,45,30)])
  nor.1302: bits[1] = nor(__statearry_bit, not.1298, id=1302, pos=[(2,45,30)])
  nor.1303: bits[1] = nor(not.1299, __stateancel__2, id=1303, pos=[(2,45,30)])
  __statearry_fraction__2: bits[25] = bit_slice(abs_fraction__1, start=1, width=25, id=1308, pos=[(1,2138,37)])
  concat.1309: bits[25] = concat(literal.1569, bit_slice.1304, id=1309, pos=[(2,45,30)])
  bit_slice.1310: bits[25] = bit_slice(abs_fraction__1, start=0, width=25, id=1310, pos=[(1,2146,20)])
  add.1311: bits[26] = add(leading_zeroes, literal.1306, id=1311, pos=[(1,2146,39)])
  concat.1509: bits[3] = concat(nor.1301, nor.1302, nor.1303, id=1509, pos=[(2,45,30)])
  __statearry_fraction__1: bits[25] = or(__statearry_fraction__2, concat.1309, id=1313, pos=[(1,2139,38)])
  __stateancel_fraction: bits[25] = shll(bit_slice.1310, add.1311, id=1314, pos=[(2,45,30)])
  shifted_fraction: bits[25] = one_hot_sel(concat.1509, cases=[__statearry_fraction__1, __stateancel_fraction, bit_slice.1310], id=1506, pos=[(2,45,30)])
  normal_chunk: bits[17] = bit_slice(shifted_fraction, start=0, width=17, id=1317, pos=[(1,2158,37)])
  half_of_extra: bits[17] = literal(value=65536, id=1318, pos=[(1,2162,39)])
  half_way_chunk: bits[2] = bit_slice(shifted_fraction, start=16, width=2, id=1319, pos=[(1,2160,22)])
  literal.1320: bits[2] = literal(value=3, id=1320, pos=[(1,2164,64)])
  literal.1543: bits[1] = literal(value=0, id=1543, pos=[(1,2080,23)])
  bit_slice.1523: bits[8] = bit_slice(shifted_fraction, start=17, width=8, id=1523, pos=[(1,2168,52)])
  ugt.1323: bits[1] = ugt(normal_chunk, half_of_extra, id=1323, pos=[(1,2164,23)])
  eq.1324: bits[1] = eq(half_way_chunk, literal.1320, id=1324, pos=[(1,2164,58)])
  concat.1524: bits[9] = concat(literal.1543, bit_slice.1523, id=1524, pos=[(1,2168,52)])
  literal.1516: bits[9] = literal(value=1, id=1516, pos=[(1,2168,52)])
  do_round_up: bits[1] = or(ugt.1323, eq.1324, id=1327, pos=[(1,2164,40)])
  add.1513: bits[9] = add(concat.1524, literal.1516, id=1513, pos=[(1,2168,52)])
  rounded_fraction__1: bits[9] = sel(do_round_up, cases=[concat.1524, add.1513], id=1330, pos=[(1,2167,6)])
  literal.1542: bits[1] = literal(value=0, id=1542, pos=[(1,2080,23)])
  literal.1552: bits[9] = literal(value=0, id=1552, pos=[(1,2080,23)])
  rounding_carry: bits[1] = bit_slice(rounded_fraction__1, start=8, width=1, id=1331, pos=[(1,2174,39)])
  concat.1332: bits[10] = concat(literal.1542, greater_exp, id=1332, pos=[(2,45,30)])
  concat.1333: bits[10] = concat(literal.1552, rounding_carry, id=1333, pos=[(2,45,30)])
  add.1334: bits[10] = add(concat.1332, concat.1333, id=1334, pos=[(1,2180,40)])
  literal.1335: bits[10] = literal(value=1, id=1335, pos=[(1,2181,64)])
  literal.1336: bits[5] = literal(value=0, id=1336, pos=[(2,45,30)])
  literal.1337: bits[27] = literal(value=0, id=1337, pos=[(1,2123,70)])
  add.1338: bits[10] = add(add.1334, literal.1335, id=1338, pos=[(1,2181,43)])
  concat.1339: bits[10] = concat(literal.1336, encode.1294, id=1339, pos=[(2,45,30)])
  ne.1340: bits[1] = ne(sum_fraction, literal.1337, id=1340, pos=[(1,2183,13)])
  bexp__4: bits[10] = sub(add.1338, concat.1339, id=1341, pos=[(1,2181,66)])
  sign_ext.1342: bits[10] = sign_ext(ne.1340, new_bit_count=10, id=1342, pos=[(1,2183,13)])
  bexp__5: bits[10] = and(bexp__4, sign_ext.1342, id=1343, pos=[(1,2183,13)])
  high_exp__1: bits[9] = literal(value=511, id=1564, pos=[(1,2016,31)])
  literal.1566: bits[16] = literal(value=0, id=1566, pos=[(1,2110,30)])
  bit_slice.1352: bits[1] = bit_slice(bexp__5, start=9, width=1, id=1352, pos=[(1,2185,14)])
  eq.1353: bits[1] = eq(result_exp__4, high_exp__1, id=1353, pos=[(1,1956,9)])
  eq.1354: bits[1] = eq(result_fraction__7, literal.1566, id=1354, pos=[(1,1956,54)])
  max_exp__4: bits[8] = literal(value=255, id=1558, pos=[(1,101,27)])
  literal.1563: bits[7] = literal(value=0, id=1563, pos=[(1,101,73)])
  max_exp__2: bits[8] = literal(value=255, id=1556, pos=[(1,101,27)])
  literal.1562: bits[7] = literal(value=0, id=1562, pos=[(1,101,73)])
  not.1357: bits[1] = not(bit_slice.1352, id=1357, pos=[(1,2185,6)])
  nand.1457: bits[1] = nand(eq.1353, eq.1354, id=1457, pos=[(1,2205,40)])
  ne.1471: bits[1] = ne(__state_1, max_exp__4, id=1471, pos=[(1,2206,31)])
  ne.1472: bits[1] = ne(__state_2, literal.1563, id=1472, pos=[(1,2206,31)])
  and.1358: bits[1] = and(eq.1353, eq.1354, id=1358, pos=[(1,1956,40)])
  eq.1355: bits[1] = eq(__state_1, max_exp__2, id=1355, pos=[(1,101,10)])
  eq.1356: bits[1] = eq(__state_2, literal.1562, id=1356, pos=[(1,101,52)])
  bit_slice.1360: bits[9] = bit_slice(bexp__5, start=0, width=9, id=1360, pos=[(2,45,30)])
  sign_ext.1361: bits[9] = sign_ext(not.1357, new_bit_count=9, id=1361, pos=[(1,2185,6)])
  literal.1567: bits[16] = literal(value=0, id=1567, pos=[(1,2110,30)])
  nor.1373: bits[1] = nor(nand.1457, result_sign__4, id=1373, pos=[(1,2205,40)])
  nor.1461: bits[1] = nor(ne.1471, ne.1472, __state_0, id=1461, pos=[(1,2206,31)])
  and.1375: bits[1] = and(and.1358, result_sign__4, id=1375, pos=[(1,2212,26)])
  and.1462: bits[1] = and(eq.1355, eq.1356, __state_0, id=1462, pos=[(1,2213,17)])
  literal.1571: bits[27] = literal(value=0, id=1571, pos=[(1,2123,70)])
  bexp__6: bits[9] = and(bit_slice.1360, sign_ext.1361, id=1364, pos=[(1,2185,6)])
  ne.1382: bits[1] = ne(result_fraction__7, literal.1567, id=1382, pos=[(1,1961,54)])
  has_pos_inf: bits[1] = or(nor.1373, nor.1461, id=1385, pos=[(1,2205,61)])
  has_neg_inf: bits[1] = or(and.1375, and.1462, id=1386, pos=[(1,2212,47)])
  not.1529: bits[1] = not(bit_slice.1289, id=1529, pos=[(2,45,30)])
  fraction_is_zero: bits[1] = eq(sum_fraction, literal.1571, id=1473, pos=[(2,45,30)])
  not.1531: bits[1] = not(greater_sign, id=1531, pos=[(2,45,30)])
  bit_slice.1380: bits[8] = bit_slice(bexp__6, start=0, width=8, id=1380, pos=[(1,2197,32)])
  and.1390: bits[1] = and(eq.1353, ne.1382, id=1390, pos=[(1,1961,40)])
  and.1391: bits[1] = and(eq.1355, ne.1472, id=1391, pos=[(1,70,38)])
  and.1392: bits[1] = and(has_pos_inf, has_neg_inf, id=1392, pos=[(1,2215,31)])
  and.1359: bits[1] = and(eq.1355, eq.1356, id=1359, pos=[(1,101,38)])
  nor.1530: bits[1] = nor(not.1529, greater_sign, id=1530, pos=[(2,45,30)])
  nor.1532: bits[1] = nor(bit_slice.1289, fraction_is_zero, not.1531, id=1532, pos=[(2,45,30)])
  literal.1553: bits[9] = literal(value=0, id=1553, pos=[(1,2080,23)])
  bit_slice.1379: bits[1] = bit_slice(bexp__6, start=8, width=1, id=1379, pos=[(1,2197,32)])
  and_reduce.1389: bits[1] = and_reduce(bit_slice.1380, id=1389, pos=[(1,2197,32)])
  is_result_nan__2: bits[1] = or(and.1390, and.1391, and.1392, id=1398, pos=[(1,2215,16)])
  is_operand_inf: bits[1] = or(and.1358, and.1359, id=1399, pos=[(1,2201,42)])
  result_sign__1: bits[1] = or(nor.1530, nor.1532, id=1521, pos=[(2,45,30)])
  not.1401: bits[1] = not(has_pos_inf, id=1401, pos=[(1,2207,40)])
  receive.472: (token, bits[1]) = receive(__token, channel=fmac__reset, id=472)
  ne.1395: bits[1] = ne(bexp__6, literal.1553, id=1395, pos=[(1,2191,24)])
  nor.1396: bits[1] = nor(bit_slice.1379, and_reduce.1389, id=1396, pos=[(1,2197,32)])
  nor.1397: bits[1] = nor(and.1358, and.1359, id=1397, pos=[(1,2203,24)])
  not.1406: bits[1] = not(is_result_nan__2, id=1406, pos=[(1,2223,20)])
  result_sign__2: bits[1] = sel(is_operand_inf, cases=[result_sign__1, not.1401], id=1407, pos=[(1,2207,20)])
  do_reset: bits[1] = tuple_index(receive.472, index=1, id=475, pos=[(2,43,19)])
  result_fraction__1: bits[7] = bit_slice(rounded_fraction__1, start=0, width=7, id=1402, pos=[(2,45,30)])
  sign_ext.1403: bits[7] = sign_ext(ne.1395, new_bit_count=7, id=1403, pos=[(1,2191,24)])
  sign_ext.1404: bits[7] = sign_ext(nor.1396, new_bit_count=7, id=1404, pos=[(1,2197,24)])
  sign_ext.1405: bits[7] = sign_ext(nor.1397, new_bit_count=7, id=1405, pos=[(1,2203,24)])
  result_sign__5: bits[1] = and(not.1406, result_sign__2, id=1413, pos=[(1,2223,20)])
  or.1408: bits[1] = or(is_result_nan__2, is_operand_inf, bit_slice.1379, and_reduce.1389, id=1408, pos=[(1,2216,19)])
  max_exp__3: bits[8] = literal(value=255, id=1557, pos=[(1,101,27)])
  not.912: bits[1] = not(do_reset, id=912, pos=[(2,47,18)])
  result_fraction__3: bits[7] = and(result_fraction__1, sign_ext.1403, sign_ext.1404, sign_ext.1405, id=1410, pos=[(1,2203,24)])
  literal.1411: bits[7] = literal(value=8, id=1411, pos=[(1,2219,26)])
  not.954: bits[1] = not(result_sign__5, id=954, pos=[(2,47,18)])
  result_exp__2: bits[8] = sel(or.1408, cases=[bit_slice.1380, max_exp__3], id=1414, pos=[(1,2216,19)])
  sign_ext.913: bits[8] = sign_ext(not.912, new_bit_count=8, id=913, pos=[(2,47,18)])
  result_fraction__4: bits[7] = sel(is_result_nan__2, cases=[result_fraction__3, literal.1411], id=1415, pos=[(1,2218,6)])
  sign_ext.916: bits[7] = sign_ext(not.912, new_bit_count=7, id=916, pos=[(2,47,18)])
  tok0: token = tuple_index(receive.464, index=0, id=1476)
  tok1: token = tuple_index(receive.468, index=0, id=1478)
  tok2: token = tuple_index(receive.472, index=0, id=474, pos=[(2,43,13)])
  nor.955: bits[1] = nor(do_reset, not.954, id=955, pos=[(2,47,18)])
  and.914: bits[8] = and(result_exp__2, sign_ext.913, id=914, pos=[(2,47,18)])
  and.917: bits[7] = and(result_fraction__4, sign_ext.916, id=917, pos=[(2,47,18)])
  after_all.1481: token = after_all(tok0, tok1, id=1481)
  nand.1426: bits[1] = nand(__statearry_bit, __stateancel__2, id=1426, pos=[(2,45,30)])
  tok3: token = after_all(tok0, tok1, tok2, id=482)
  acc__1: (bits[1], bits[8], bits[7]) = tuple(nor.955, and.914, and.917, id=786, pos=[(2,47,18)])
  assert_1416: token = assert(after_all.1481, nand.1426, message="Assertion failure via fail! @ /home/proppy/xls-env/share/xls/xls/dslx/ir_convert/ir_converter_main.runfiles/com_google_xls/xls/dslx/stdlib/apfloat.x:2152:15-2152:56", label="carry_and_cancel", id=1419, pos=[(2,45,30)])
  send.483: token = send(tok3, acc__1, channel=fmac__output, id=483)
  after_all.956: token = after_all(assert_1416, send.483, id=956)
  next (after_all.956, nor.955, and.914, and.917)
}
