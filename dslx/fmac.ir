package fmac

file_number 0 "/home/proppy/xls-env/share/xls/xls/dslx/ir_convert/ir_converter_main.runfiles/com_google_xls/xls/dslx/stdlib/std.x"
file_number 1 "/home/proppy/xls-env/share/xls/xls/dslx/ir_convert/ir_converter_main.runfiles/com_google_xls/xls/dslx/stdlib/apfloat.x"
file_number 2 "fmac.x"

chan fmac__input_a((bits[1], bits[8], bits[7]), id=0, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan fmac__input_b((bits[1], bits[8], bits[7]), id=1, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan fmac__reset(bits[1], id=2, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan fmac__output((bits[1], bits[8], bits[7]), id=3, kind=streaming, ops=send_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

fn __std__mask_bits__8() -> bits[8] {
  literal.2: bits[8] = literal(value=0, id=2, pos=[(0,518,49)])
  X: bits[32] = literal(value=8, id=1, pos=[(0,518,17)])
  ret not.3: bits[8] = not(literal.2, id=3, pos=[(0,518,40)])
}

fn __std__abs__10(x: bits[10]) -> bits[10] {
  literal.6: bits[10] = literal(value=0, id=6, pos=[(0,276,65)])
  slt.7: bits[1] = slt(x, literal.6, id=7, pos=[(0,276,54)])
  neg.8: bits[10] = neg(x, id=8, pos=[(0,276,69)])
  BITS: bits[32] = literal(value=10, id=5, pos=[(0,276,11)])
  ret sel.9: bits[10] = sel(slt.7, cases=[x, neg.8], id=9, pos=[(0,276,49)])
}

fn __std__mask_bits__9() -> bits[9] {
  literal.11: bits[9] = literal(value=0, id=11, pos=[(0,518,49)])
  X: bits[32] = literal(value=9, id=10, pos=[(0,518,17)])
  ret not.12: bits[9] = not(literal.11, id=12, pos=[(0,518,40)])
}

fn __apfloat__is_inf__8_7(x: (bits[1], bits[8], bits[7])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=16, pos=[(1,101,4)])
  invoke.17: bits[8] = invoke(to_apply=__std__mask_bits__8, id=17, pos=[(1,101,27)])
  x_fraction: bits[7] = tuple_index(x, index=2, id=19, pos=[(1,101,42)])
  literal.20: bits[7] = literal(value=0, id=20, pos=[(1,101,73)])
  eq.18: bits[1] = eq(x_bexp, invoke.17, id=18, pos=[(1,101,10)])
  eq.21: bits[1] = eq(x_fraction, literal.20, id=21, pos=[(1,101,52)])
  EXP_SZ: bits[32] = literal(value=8, id=14, pos=[(1,99,14)])
  FRACTION_SZ: bits[32] = literal(value=7, id=15, pos=[(1,99,26)])
  ret and.22: bits[1] = and(eq.18, eq.21, id=22, pos=[(1,101,38)])
}

fn __apfloat__is_nan__8_7(x: (bits[1], bits[8], bits[7])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=26, pos=[(1,70,4)])
  invoke.27: bits[8] = invoke(to_apply=__std__mask_bits__8, id=27, pos=[(1,70,27)])
  x_fraction: bits[7] = tuple_index(x, index=2, id=29, pos=[(1,70,42)])
  literal.30: bits[7] = literal(value=0, id=30, pos=[(1,70,73)])
  eq.28: bits[1] = eq(x_bexp, invoke.27, id=28, pos=[(1,70,10)])
  ne.31: bits[1] = ne(x_fraction, literal.30, id=31, pos=[(1,70,52)])
  EXP_SZ: bits[32] = literal(value=8, id=24, pos=[(1,68,14)])
  FRACTION_SZ: bits[32] = literal(value=7, id=25, pos=[(1,68,26)])
  ret and.32: bits[1] = and(eq.28, ne.31, id=32, pos=[(1,70,38)])
}

fn __apfloat__mul_no_round__9_10_8_7_16(a: (bits[1], bits[8], bits[7]), b: (bits[1], bits[8], bits[7])) -> (bits[1], bits[9], bits[16]) {
  a_fraction: bits[7] = tuple_index(a, index=2, id=40, pos=[(1,1982,21)])
  literal.42: bits[16] = literal(value=1, id=42, pos=[(1,1982,74)])
  FRACTION_SZ: bits[32] = literal(value=7, id=36, pos=[(1,1974,29)])
  b_fraction: bits[7] = tuple_index(b, index=2, id=45, pos=[(1,1983,21)])
  literal.47: bits[16] = literal(value=1, id=47, pos=[(1,1983,74)])
  a_bexp: bits[8] = tuple_index(a, index=1, id=50, pos=[(1,1986,23)])
  literal.51: bits[8] = literal(value=0, id=51, pos=[(1,1986,43)])
  zero_ext.41: bits[16] = zero_ext(a_fraction, new_bit_count=16, id=41)
  shll.43: bits[16] = shll(literal.42, FRACTION_SZ, id=43, pos=[(1,1982,76)])
  b_bexp: bits[8] = tuple_index(b, index=1, id=55, pos=[(1,1987,23)])
  literal.56: bits[8] = literal(value=0, id=56, pos=[(1,1987,43)])
  zero_ext.46: bits[16] = zero_ext(b_fraction, new_bit_count=16, id=46)
  shll.48: bits[16] = shll(literal.47, FRACTION_SZ, id=48, pos=[(1,1983,76)])
  eq.52: bits[1] = eq(a_bexp, literal.51, id=52, pos=[(1,1986,29)])
  a_fraction__1: bits[16] = or(zero_ext.41, shll.43, id=44, pos=[(1,1982,53)])
  literal.53: bits[16] = literal(value=0, id=53, pos=[(1,1986,65)])
  eq.57: bits[1] = eq(b_bexp, literal.56, id=57, pos=[(1,1987,29)])
  b_fraction__1: bits[16] = or(zero_ext.46, shll.48, id=49, pos=[(1,1983,53)])
  literal.58: bits[16] = literal(value=0, id=58, pos=[(1,1987,65)])
  a_fraction__2: bits[16] = sel(eq.52, cases=[a_fraction__1, literal.53], id=54, pos=[(1,1986,19)])
  b_fraction__2: bits[16] = sel(eq.57, cases=[b_fraction__1, literal.58], id=59, pos=[(1,1987,19)])
  a_bexp__1: bits[8] = tuple_index(a, index=1, id=72, pos=[(1,1996,15)])
  b_bexp__1: bits[8] = tuple_index(b, index=1, id=74, pos=[(1,1996,48)])
  invoke.68: bits[8] = invoke(to_apply=__std__mask_bits__8, id=68, pos=[(1,1995,27)])
  fraction: bits[16] = umul(a_fraction__2, b_fraction__2, id=60, pos=[(1,1988,28)])
  zero_ext.73: bits[10] = zero_ext(a_bexp__1, new_bit_count=10, id=73)
  zero_ext.75: bits[10] = zero_ext(b_bexp__1, new_bit_count=10, id=75)
  zero_ext.69: bits[10] = zero_ext(invoke.68, new_bit_count=10, id=69)
  literal.70: bits[1] = literal(value=1, id=70, pos=[(1,1995,63)])
  bit_slice.61: bits[1] = bit_slice(fraction, start=15, width=1, id=61, pos=[(1,1991,31)])
  a_bexp__2: bits[8] = tuple_index(a, index=1, id=80, pos=[(1,1999,10)])
  literal.81: bits[8] = literal(value=0, id=81, pos=[(1,1999,32)])
  b_bexp__2: bits[8] = tuple_index(b, index=1, id=83, pos=[(1,1999,38)])
  literal.84: bits[8] = literal(value=0, id=84, pos=[(1,1999,60)])
  add.76: bits[10] = add(zero_ext.73, zero_ext.75, id=76, pos=[(1,1996,44)])
  bias: bits[10] = shra(zero_ext.69, literal.70, id=71, pos=[(1,1995,60)])
  fraction_shift: bits[16] = zero_ext(bit_slice.61, new_bit_count=16, id=62)
  eq.82: bits[1] = eq(a_bexp__2, literal.81, id=82, pos=[(1,1999,16)])
  eq.85: bits[1] = eq(b_bexp__2, literal.84, id=85, pos=[(1,1999,44)])
  sub.77: bits[10] = sub(add.76, bias, id=77, pos=[(1,1996,77)])
  bit_slice.78: bits[10] = bit_slice(fraction_shift, start=0, width=10, id=78)
  or.86: bits[1] = or(eq.82, eq.85, id=86, pos=[(1,1999,34)])
  bexp: bits[10] = add(sub.77, bit_slice.78, id=79, pos=[(1,1997,11)])
  literal.87: bits[10] = literal(value=0, id=87, pos=[(1,2000,27)])
  literal.63: bits[16] = literal(value=0, id=63, pos=[(1,1992,56)])
  literal.65: bits[1] = literal(value=1, id=65, pos=[(1,1992,72)])
  bexp__1: bits[10] = sel(or.86, cases=[bexp, literal.87], id=88, pos=[(1,1999,6)])
  literal.89: bits[10] = literal(value=0, id=89, pos=[(1,2009,48)])
  eq.64: bits[1] = eq(fraction_shift, literal.63, id=64, pos=[(1,1992,35)])
  shll.66: bits[16] = shll(fraction, literal.65, id=66, pos=[(1,1992,69)])
  invoke.94: bits[10] = invoke(bexp__1, to_apply=__std__abs__10, id=94, pos=[(1,2012,24)])
  is_subnormal: bits[1] = sle(bexp__1, literal.89, id=90, pos=[(1,2009,26)])
  bit_slice.92: bits[9] = bit_slice(bexp__1, start=0, width=9, id=92)
  literal.91: bits[9] = literal(value=0, id=91, pos=[(1,2011,38)])
  fraction__1: bits[16] = sel(eq.64, cases=[fraction, shll.66], id=67, pos=[(1,1992,17)])
  sub_exp: bits[9] = bit_slice(invoke.94, start=0, width=9, id=95)
  a_bexp__3: bits[8] = tuple_index(a, index=1, id=112, pos=[(1,2031,19)])
  literal.113: bits[8] = literal(value=0, id=113, pos=[(1,2031,39)])
  b_bexp__3: bits[8] = tuple_index(b, index=1, id=115, pos=[(1,2031,45)])
  literal.116: bits[8] = literal(value=0, id=116, pos=[(1,2031,65)])
  result_exp: bits[9] = sel(is_subnormal, cases=[bit_slice.92, literal.91], id=93, pos=[(1,2011,6)])
  high_exp: bits[9] = invoke(to_apply=__std__mask_bits__9, id=98, pos=[(1,2016,31)])
  shrl.96: bits[16] = shrl(fraction__1, sub_exp, id=96, pos=[(1,2013,51)])
  eq.114: bits[1] = eq(a_bexp__3, literal.113, id=114, pos=[(1,2031,25)])
  eq.117: bits[1] = eq(b_bexp__3, literal.116, id=117, pos=[(1,2031,51)])
  invoke.122: bits[1] = invoke(a, to_apply=__apfloat__is_inf__8_7, id=122, pos=[(1,2033,26)])
  invoke.123: bits[1] = invoke(b, to_apply=__apfloat__is_inf__8_7, id=123, pos=[(1,2033,39)])
  ult.99: bits[1] = ult(result_exp, high_exp, id=99, pos=[(1,2017,38)])
  literal.100: bits[16] = literal(value=0, id=100, pos=[(1,2017,94)])
  result_fraction: bits[16] = sel(is_subnormal, cases=[fraction__1, shrl.96], id=97, pos=[(1,2013,24)])
  invoke.119: bits[1] = invoke(a, to_apply=__apfloat__is_nan__8_7, id=119, pos=[(1,2032,26)])
  invoke.120: bits[1] = invoke(b, to_apply=__apfloat__is_nan__8_7, id=120, pos=[(1,2032,39)])
  has_0_arg: bits[1] = or(eq.114, eq.117, id=118, pos=[(1,2031,41)])
  has_inf_arg: bits[1] = or(invoke.122, invoke.123, id=124, pos=[(1,2033,30)])
  invoke.105: bits[1] = invoke(a, to_apply=__apfloat__is_inf__8_7, id=105, pos=[(1,2021,29)])
  invoke.106: bits[1] = invoke(b, to_apply=__apfloat__is_inf__8_7, id=106, pos=[(1,2021,42)])
  ult.102: bits[1] = ult(result_exp, high_exp, id=102, pos=[(1,2018,33)])
  zero_ext.103: bits[9] = zero_ext(result_exp, new_bit_count=9, id=103)
  result_fraction__1: bits[16] = sel(ult.99, cases=[literal.100, result_fraction], id=101, pos=[(1,2017,24)])
  literal.129: bits[16] = literal(value=1, id=129, pos=[(1,2036,63)])
  literal.130: bits[16] = literal(value=1, id=130, pos=[(1,2036,85)])
  has_nan_arg: bits[1] = or(invoke.119, invoke.120, id=121, pos=[(1,2032,30)])
  and.125: bits[1] = and(has_0_arg, has_inf_arg, id=125, pos=[(1,2034,48)])
  a_sign: bits[1] = tuple_index(a, index=0, id=134, pos=[(1,2039,21)])
  b_sign: bits[1] = tuple_index(b, index=0, id=135, pos=[(1,2039,31)])
  is_operand_inf: bits[1] = or(invoke.105, invoke.106, id=107, pos=[(1,2021,33)])
  result_exp__1: bits[9] = sel(ult.102, cases=[high_exp, zero_ext.103], id=104, pos=[(1,2018,19)])
  zero_ext.110: bits[16] = zero_ext(result_fraction__1, new_bit_count=16, id=110)
  literal.109: bits[16] = literal(value=0, id=109, pos=[(1,2024,22)])
  literal.128: bits[16] = literal(value=1, id=128, pos=[(1,2036,39)])
  sub.131: bits[16] = sub(literal.129, literal.130, id=131, pos=[(1,2036,65)])
  is_result_nan: bits[1] = or(has_nan_arg, and.125, id=126, pos=[(1,2034,34)])
  result_sign: bits[1] = ne(a_sign, b_sign, id=136, pos=[(1,2039,27)])
  literal.137: bits[1] = literal(value=0, id=137, pos=[(1,2040,42)])
  result_exp__2: bits[9] = sel(is_operand_inf, cases=[result_exp__1, high_exp], id=108, pos=[(1,2022,19)])
  result_fraction__2: bits[16] = sel(is_operand_inf, cases=[zero_ext.110, literal.109], id=111, pos=[(1,2023,24)])
  nan_fraction: bits[16] = shll(literal.128, sub.131, id=132, pos=[(1,2036,41)])
  result_sign__1: bits[1] = sel(is_result_nan, cases=[result_sign, literal.137], id=138, pos=[(1,2040,20)])
  result_exp__3: bits[9] = sel(is_result_nan, cases=[result_exp__2, high_exp], id=127, pos=[(1,2035,19)])
  result_fraction__3: bits[16] = sel(is_result_nan, cases=[result_fraction__2, nan_fraction], id=133, pos=[(1,2037,24)])
  EXP_SZ: bits[32] = literal(value=8, id=35, pos=[(1,1974,16)])
  WIDE_FRACTION: bits[32] = literal(value=16, id=37, pos=[(1,1975,16)])
  EXP_CARRY: bits[32] = literal(value=9, id=38, pos=[(1,1976,16)])
  EXP_SIGN_CARRY: bits[32] = literal(value=10, id=39, pos=[(1,1977,16)])
  ret tuple.139: (bits[1], bits[9], bits[16]) = tuple(result_sign__1, result_exp__3, result_fraction__3, id=139, pos=[(1,2042,10)])
}

fn __apfloat__is_product_inf__9_16(p: (bits[1], bits[9], bits[16])) -> bits[1] {
  p_bexp: bits[9] = tuple_index(p, index=1, id=143, pos=[(1,1956,3)])
  invoke.144: bits[9] = invoke(to_apply=__std__mask_bits__9, id=144, pos=[(1,1956,26)])
  p_fraction: bits[16] = tuple_index(p, index=2, id=146, pos=[(1,1956,44)])
  literal.147: bits[16] = literal(value=0, id=147, pos=[(1,1956,75)])
  eq.145: bits[1] = eq(p_bexp, invoke.144, id=145, pos=[(1,1956,9)])
  eq.148: bits[1] = eq(p_fraction, literal.147, id=148, pos=[(1,1956,54)])
  EXP_CARRY: bits[32] = literal(value=9, id=141, pos=[(1,1955,18)])
  WIDE_FRACTION: bits[32] = literal(value=16, id=142, pos=[(1,1955,34)])
  ret and.149: bits[1] = and(eq.145, eq.148, id=149, pos=[(1,1956,40)])
}

fn __apfloat__is_product_nan__9_16(p: (bits[1], bits[9], bits[16])) -> bits[1] {
  p_bexp: bits[9] = tuple_index(p, index=1, id=153, pos=[(1,1961,3)])
  invoke.154: bits[9] = invoke(to_apply=__std__mask_bits__9, id=154, pos=[(1,1961,26)])
  p_fraction: bits[16] = tuple_index(p, index=2, id=156, pos=[(1,1961,44)])
  literal.157: bits[16] = literal(value=0, id=157, pos=[(1,1961,75)])
  eq.155: bits[1] = eq(p_bexp, invoke.154, id=155, pos=[(1,1961,9)])
  ne.158: bits[1] = ne(p_fraction, literal.157, id=158, pos=[(1,1961,54)])
  EXP_CARRY: bits[32] = literal(value=9, id=151, pos=[(1,1960,18)])
  WIDE_FRACTION: bits[32] = literal(value=16, id=152, pos=[(1,1960,34)])
  ret and.159: bits[1] = and(eq.155, ne.158, id=159, pos=[(1,1961,40)])
}

fn __itok__apfloat__fma__8_7(__token: token, __activated: bits[1], a: (bits[1], bits[8], bits[7]), b: (bits[1], bits[8], bits[7]), c: (bits[1], bits[8], bits[7])) -> (token, (bits[1], bits[8], bits[7])) {
  FRACTION_SZ: bits[32] = literal(value=7, id=166, pos=[(1,2059,24)])
  literal.171: bits[32] = literal(value=1, id=171, pos=[(1,2068,47)])
  ab: (bits[1], bits[9], bits[16]) = invoke(a, b, to_apply=__apfloat__mul_no_round__9_10_8_7_16, id=184, pos=[(1,2080,23)])
  c_bexp: bits[8] = tuple_index(c, index=1, id=186, pos=[(1,2082,34)])
  add.172: bits[32] = add(FRACTION_SZ, literal.171, id=172, pos=[(1,2068,41)])
  literal.173: bits[32] = literal(value=3, id=173, pos=[(1,2068,56)])
  ab_bexp: bits[9] = tuple_index(ab, index=1, id=185, pos=[(1,2082,25)])
  zero_ext.187: bits[9] = zero_ext(c_bexp, new_bit_count=9, id=187)
  c_bexp__1: bits[8] = tuple_index(c, index=1, id=190, pos=[(1,2083,28)])
  c_fraction: bits[7] = tuple_index(c, index=2, id=200, pos=[(1,2088,16)])
  literal.202: bits[25] = literal(value=1, id=202, pos=[(1,2088,68)])
  umul.174: bits[32] = umul(add.172, literal.173, id=174, pos=[(1,2068,50)])
  literal.175: bits[32] = literal(value=1, id=175, pos=[(1,2068,64)])
  ugt.188: bits[1] = ugt(ab_bexp, zero_ext.187, id=188, pos=[(1,2082,31)])
  zero_ext.191: bits[9] = zero_ext(c_bexp__1, new_bit_count=9, id=191)
  ab_bexp__1: bits[9] = tuple_index(ab, index=1, id=189, pos=[(1,2082,61)])
  c_bexp__4: bits[8] = tuple_index(c, index=1, id=224, pos=[(1,2099,33)])
  literal.212: bits[32] = literal(value=1, id=212, pos=[(1,2094,81)])
  c_bexp__3: bits[8] = tuple_index(c, index=1, id=205, pos=[(1,2089,19)])
  literal.206: bits[8] = literal(value=0, id=206, pos=[(1,2089,39)])
  zero_ext.201: bits[25] = zero_ext(c_fraction, new_bit_count=25, id=201)
  shll.203: bits[25] = shll(literal.202, FRACTION_SZ, id=203, pos=[(1,2088,70)])
  literal.218: bits[32] = literal(value=1, id=218, pos=[(1,2095,61)])
  WIDE_FRACTION: bits[32] = add(umul.174, literal.175, id=176, pos=[(1,2068,58)])
  greater_exp: bits[9] = sel(ugt.188, cases=[zero_ext.191, ab_bexp__1], id=192, pos=[(1,2082,20)])
  zero_ext.225: bits[9] = zero_ext(c_bexp__4, new_bit_count=9, id=225)
  add.213: bits[32] = add(FRACTION_SZ, literal.212, id=213, pos=[(1,2094,75)])
  literal.214: bits[32] = literal(value=2, id=214, pos=[(1,2094,90)])
  ab_bexp__3: bits[9] = tuple_index(ab, index=1, id=222, pos=[(1,2098,34)])
  eq.207: bits[1] = eq(c_bexp__3, literal.206, id=207, pos=[(1,2089,25)])
  wide_c: bits[25] = or(zero_ext.201, shll.203, id=204, pos=[(1,2088,47)])
  literal.208: bits[25] = literal(value=0, id=208, pos=[(1,2089,61)])
  add.219: bits[32] = add(FRACTION_SZ, literal.218, id=219, pos=[(1,2095,55)])
  bit_slice.233: bits[9] = bit_slice(WIDE_FRACTION, start=0, width=9, id=233)
  rshift_c: bits[9] = sub(greater_exp, zero_ext.225, id=226, pos=[(1,2099,29)])
  ab_fraction: bits[16] = tuple_index(ab, index=2, id=210, pos=[(1,2094,9)])
  umul.215: bits[32] = umul(add.213, literal.214, id=215, pos=[(1,2094,84)])
  bit_slice.229: bits[9] = bit_slice(WIDE_FRACTION, start=0, width=9, id=229)
  rshift_ab: bits[9] = sub(greater_exp, ab_bexp__3, id=223, pos=[(1,2098,30)])
  wide_c__1: bits[25] = sel(eq.207, cases=[wide_c, literal.208], id=209, pos=[(1,2089,15)])
  sub.220: bits[32] = sub(WIDE_FRACTION, add.219, id=220, pos=[(1,2095,40)])
  sub.234: bits[9] = sub(bit_slice.233, rshift_c, id=234, pos=[(1,2107,49)])
  zero_ext.211: bits[25] = zero_ext(ab_fraction, new_bit_count=25, id=211)
  sub.216: bits[32] = sub(WIDE_FRACTION, umul.215, id=216, pos=[(1,2094,59)])
  sub.230: bits[9] = sub(bit_slice.229, rshift_ab, id=230, pos=[(1,2105,50)])
  bit_slice.237: bits[9] = bit_slice(WIDE_FRACTION, start=0, width=9, id=237)
  wide_c__2: bits[25] = shll(wide_c__1, sub.220, id=221, pos=[(1,2095,22)])
  zero_ext.235: bits[25] = zero_ext(sub.234, new_bit_count=25, id=235)
  wide_ab: bits[25] = shll(zero_ext.211, sub.216, id=217, pos=[(1,2094,41)])
  zero_ext.231: bits[25] = zero_ext(sub.230, new_bit_count=25, id=231)
  uge.238: bits[1] = uge(rshift_c, bit_slice.237, id=238, pos=[(1,2109,18)])
  dropped_c: bits[25] = shll(wide_c__2, zero_ext.235, id=236, pos=[(1,2107,13)])
  dropped_ab: bits[25] = shll(wide_ab, zero_ext.231, id=232, pos=[(1,2105,14)])
  literal.240: bits[25] = literal(value=0, id=240, pos=[(1,2110,51)])
  dropped_c__1: bits[25] = sel(uge.238, cases=[dropped_c, wide_c__2], id=239, pos=[(1,2109,6)])
  literal.243: bits[25] = literal(value=0, id=243, pos=[(1,2111,49)])
  c_bexp__2: bits[8] = tuple_index(c, index=1, id=194, pos=[(1,2084,35)])
  ne.241: bits[1] = ne(dropped_ab, literal.240, id=241, pos=[(1,2110,30)])
  ne.244: bits[1] = ne(dropped_c__1, literal.243, id=244, pos=[(1,2111,28)])
  ab_bexp__2: bits[9] = tuple_index(ab, index=1, id=193, pos=[(1,2084,26)])
  zero_ext.195: bits[9] = zero_ext(c_bexp__2, new_bit_count=9, id=195)
  shifted_ab: bits[25] = shrl(wide_ab, rshift_ab, id=227, pos=[(1,2100,27)])
  sticky_ab: bits[25] = zero_ext(ne.241, new_bit_count=25, id=242)
  shifted_c: bits[25] = shrl(wide_c__2, rshift_c, id=228, pos=[(1,2101,25)])
  sticky_c: bits[25] = zero_ext(ne.244, new_bit_count=25, id=245)
  ugt.196: bits[1] = ugt(ab_bexp__2, zero_ext.195, id=196, pos=[(1,2084,32)])
  c_sign: bits[1] = tuple_index(c, index=0, id=198, pos=[(1,2084,78)])
  ab_sign: bits[1] = tuple_index(ab, index=0, id=197, pos=[(1,2084,62)])
  or.246: bits[25] = or(shifted_ab, sticky_ab, id=246, pos=[(1,2114,31)])
  or.248: bits[25] = or(shifted_c, sticky_c, id=248, pos=[(1,2115,29)])
  ab_sign__1: bits[1] = tuple_index(ab, index=0, id=250, pos=[(1,2118,24)])
  greater_sign: bits[1] = sel(ugt.196, cases=[c_sign, ab_sign], id=199, pos=[(1,2084,21)])
  shifted_ab__1: bits[27] = zero_ext(or.246, new_bit_count=27, id=247)
  c_sign__1: bits[1] = tuple_index(c, index=0, id=254, pos=[(1,2119,22)])
  shifted_c__1: bits[27] = zero_ext(or.248, new_bit_count=27, id=249)
  ne.251: bits[1] = ne(ab_sign__1, greater_sign, id=251, pos=[(1,2118,30)])
  neg.252: bits[27] = neg(shifted_ab__1, id=252, pos=[(1,2118,48)])
  ne.255: bits[1] = ne(c_sign__1, greater_sign, id=255, pos=[(1,2119,28)])
  neg.256: bits[27] = neg(shifted_c__1, id=256, pos=[(1,2119,46)])
  shifted_ab__2: bits[27] = sel(ne.251, cases=[shifted_ab__1, neg.252], id=253, pos=[(1,2118,19)])
  shifted_c__2: bits[27] = sel(ne.255, cases=[shifted_c__1, neg.256], id=257, pos=[(1,2119,18)])
  sum_fraction: bits[27] = add(shifted_ab__2, shifted_c__2, id=258, pos=[(1,2122,32)])
  literal.287: bits[27] = literal(value=0, id=287, pos=[(1,2132,54)])
  slt.288: bits[1] = slt(sum_fraction, literal.287, id=288, pos=[(1,2132,23)])
  neg.289: bits[27] = neg(sum_fraction, id=289, pos=[(1,2132,58)])
  sel.290: bits[27] = sel(slt.288, cases=[sum_fraction, neg.289], id=290, pos=[(1,2132,7)])
  abs_fraction: bits[26] = bit_slice(sel.290, start=0, width=26, id=291)
  reverse.299: bits[26] = reverse(abs_fraction, id=299, pos=[(1,2143,26)])
  one_hot.300: bits[27] = one_hot(reverse.299, lsb_prio=true, id=300, pos=[(1,2143,26)])
  encode.301: bits[5] = encode(one_hot.300, id=301, pos=[(1,2143,26)])
  leading_zeroes: bits[26] = zero_ext(encode.301, new_bit_count=26, id=302, pos=[(1,2143,26)])
  literal.303: bits[26] = literal(value=1, id=303, pos=[(1,2144,56)])
  carry_bit: bits[1] = bit_slice(abs_fraction, start=25, width=1, id=292, pos=[(1,2137,30)])
  cancel: bits[1] = ugt(leading_zeroes, literal.303, id=304, pos=[(1,2144,30)])
  tuple.309: (bits[1], bits[1]) = tuple(carry_bit, cancel, id=309, pos=[(1,2147,30)])
  literal.330: bits[1] = literal(value=0, id=330, pos=[(1,2150,5)])
  tuple_index.329: bits[1] = tuple_index(tuple.309, index=0, id=329)
  literal.321: bits[1] = literal(value=0, id=321, pos=[(1,2149,5)])
  tuple_index.320: bits[1] = tuple_index(tuple.309, index=0, id=320)
  literal.312: bits[1] = literal(value=1, id=312, pos=[(1,2148,5)])
  tuple_index.311: bits[1] = tuple_index(tuple.309, index=0, id=311)
  literal.328: bits[1] = literal(value=1, id=328)
  eq.331: bits[1] = eq(literal.330, tuple_index.329, id=331)
  literal.334: bits[1] = literal(value=0, id=334, pos=[(1,2150,12)])
  tuple_index.333: bits[1] = tuple_index(tuple.309, index=1, id=333)
  literal.319: bits[1] = literal(value=1, id=319)
  eq.322: bits[1] = eq(literal.321, tuple_index.320, id=322)
  literal.325: bits[1] = literal(value=1, id=325, pos=[(1,2149,12)])
  tuple_index.324: bits[1] = tuple_index(tuple.309, index=1, id=324)
  literal.310: bits[1] = literal(value=1, id=310)
  eq.313: bits[1] = eq(literal.312, tuple_index.311, id=313)
  literal.316: bits[1] = literal(value=0, id=316, pos=[(1,2148,11)])
  tuple_index.315: bits[1] = tuple_index(tuple.309, index=1, id=315)
  and.332: bits[1] = and(literal.328, eq.331, id=332)
  eq.335: bits[1] = eq(literal.334, tuple_index.333, id=335)
  and.323: bits[1] = and(literal.319, eq.322, id=323)
  eq.326: bits[1] = eq(literal.325, tuple_index.324, id=326)
  and.314: bits[1] = and(literal.310, eq.313, id=314)
  eq.317: bits[1] = eq(literal.316, tuple_index.315, id=317)
  literal.293: bits[26] = literal(value=1, id=293, pos=[(1,2138,64)])
  literal.305: bits[26] = literal(value=1, id=305, pos=[(1,2146,65)])
  and.336: bits[1] = and(and.332, eq.335, id=336)
  and.327: bits[1] = and(and.323, eq.326, id=327)
  and.318: bits[1] = and(and.314, eq.317, id=318)
  shrl.294: bits[26] = shrl(abs_fraction, literal.293, id=294, pos=[(1,2138,37)])
  bit_slice.296: bits[1] = bit_slice(abs_fraction, start=0, width=1, id=296, pos=[(1,2139,53)])
  sub.306: bits[26] = sub(leading_zeroes, literal.305, id=306, pos=[(1,2146,39)])
  concat.347: bits[3] = concat(and.336, and.327, and.318, id=347)
  carry_fraction: bits[25] = bit_slice(shrl.294, start=0, width=25, id=295)
  zero_ext.297: bits[25] = zero_ext(bit_slice.296, new_bit_count=25, id=297)
  shll.307: bits[26] = shll(abs_fraction, sub.306, id=307, pos=[(1,2146,20)])
  literal.340: bits[25] = literal(value=0, id=340, pos=[(1,2151,53)])
  one_hot.348: bits[4] = one_hot(concat.347, lsb_prio=true, id=348)
  carry_fraction__1: bits[25] = or(carry_fraction, zero_ext.297, id=298, pos=[(1,2139,38)])
  cancel_fraction: bits[25] = bit_slice(shll.307, start=0, width=25, id=308)
  bit_slice.337: bits[25] = bit_slice(abs_fraction, start=0, width=25, id=337)
  identity.346: bits[25] = identity(literal.340, id=346)
  WIDE_FRACTION_LOW_BIT: bits[32] = sub(WIDE_FRACTION, FRACTION_SZ, id=181, pos=[(1,2075,50)])
  literal.353: bits[32] = literal(value=2, id=353, pos=[(1,2162,71)])
  shifted_fraction: bits[25] = one_hot_sel(one_hot.348, cases=[carry_fraction__1, cancel_fraction, bit_slice.337, identity.346], id=349)
  literal.352: bits[17] = literal(value=1, id=352, pos=[(1,2162,37)])
  sub.354: bits[32] = sub(WIDE_FRACTION_LOW_BIT, literal.353, id=354, pos=[(1,2162,65)])
  normal_chunk: bits[17] = bit_slice(shifted_fraction, start=0, width=17, id=350, pos=[(1,2158,37)])
  half_of_extra: bits[17] = shll(literal.352, sub.354, id=355, pos=[(1,2162,39)])
  half_way_chunk: bits[2] = bit_slice(shifted_fraction, start=16, width=2, id=351, pos=[(1,2160,22)])
  literal.357: bits[2] = literal(value=3, id=357, pos=[(1,2164,64)])
  literal.365: bits[32] = literal(value=1, id=365, pos=[(1,2169,71)])
  ugt.356: bits[1] = ugt(normal_chunk, half_of_extra, id=356, pos=[(1,2164,23)])
  eq.358: bits[1] = eq(half_way_chunk, literal.357, id=358, pos=[(1,2164,58)])
  literal.364: bits[26] = literal(value=1, id=364, pos=[(1,2169,37)])
  sub.366: bits[32] = sub(WIDE_FRACTION_LOW_BIT, literal.365, id=366, pos=[(1,2169,65)])
  or.359: bits[1] = or(ugt.356, eq.358, id=359, pos=[(1,2164,40)])
  literal.361: bits[1] = literal(value=0, id=361, pos=[(1,2165,16)])
  literal.360: bits[1] = literal(value=1, id=360, pos=[(1,2164,74)])
  zero_ext.363: bits[26] = zero_ext(shifted_fraction, new_bit_count=26, id=363)
  shll.367: bits[26] = shll(literal.364, sub.366, id=367, pos=[(1,2169,39)])
  do_round_up: bits[1] = sel(or.359, cases=[literal.361, literal.360], id=362, pos=[(1,2164,6)])
  zero_ext.369: bits[26] = zero_ext(shifted_fraction, new_bit_count=26, id=369)
  add.368: bits[26] = add(zero_ext.363, shll.367, id=368, pos=[(1,2168,52)])
  rounded_fraction: bits[26] = sel(do_round_up, cases=[zero_ext.369, add.368], id=370, pos=[(1,2167,6)])
  rounding_carry: bits[1] = bit_slice(rounded_fraction, start=25, width=1, id=371, pos=[(1,2174,39)])
  zero_ext.377: bits[10] = zero_ext(greater_exp, new_bit_count=10, id=377)
  zero_ext.378: bits[10] = zero_ext(rounding_carry, new_bit_count=10, id=378)
  literal.259: bits[27] = literal(value=0, id=259, pos=[(1,2123,70)])
  literal.261: bits[27] = literal(value=0, id=261, pos=[(1,2124,89)])
  add.379: bits[10] = add(zero_ext.377, zero_ext.378, id=379, pos=[(1,2180,40)])
  literal.380: bits[10] = literal(value=1, id=380, pos=[(1,2181,64)])
  fraction_is_zero: bits[1] = eq(sum_fraction, literal.259, id=260, pos=[(1,2123,38)])
  slt.262: bits[1] = slt(sum_fraction, literal.261, id=262, pos=[(1,2124,58)])
  add.381: bits[10] = add(add.379, literal.380, id=381, pos=[(1,2181,43)])
  bit_slice.382: bits[10] = bit_slice(leading_zeroes, start=0, width=10, id=382)
  tuple.263: (bits[1], bits[1]) = tuple(fraction_is_zero, slt.262, id=263, pos=[(1,2124,26)])
  bexp: bits[10] = sub(add.381, bit_slice.382, id=383, pos=[(1,2181,66)])
  literal.384: bits[10] = literal(value=0, id=384, pos=[(1,2183,54)])
  literal.372: bits[32] = literal(value=1, id=372, pos=[(1,2176,57)])
  literal.275: bits[1] = literal(value=0, id=275, pos=[(1,2126,5)])
  tuple_index.274: bits[1] = tuple_index(tuple.263, index=0, id=274)
  literal.266: bits[1] = literal(value=1, id=266, pos=[(1,2125,5)])
  tuple_index.265: bits[1] = tuple_index(tuple.263, index=0, id=265)
  bexp__1: bits[10] = sel(fraction_is_zero, cases=[bexp, literal.384], id=385, pos=[(1,2183,13)])
  literal.386: bits[10] = literal(value=0, id=386, pos=[(1,2185,35)])
  sub.373: bits[32] = sub(WIDE_FRACTION_LOW_BIT, literal.372, id=373, pos=[(1,2176,51)])
  literal.273: bits[1] = literal(value=1, id=273)
  eq.276: bits[1] = eq(literal.275, tuple_index.274, id=276)
  literal.279: bits[1] = literal(value=1, id=279, pos=[(1,2126,12)])
  tuple_index.278: bits[1] = tuple_index(tuple.263, index=1, id=278)
  literal.264: bits[1] = literal(value=1, id=264)
  eq.267: bits[1] = eq(literal.266, tuple_index.265, id=267)
  ab_sign__2: bits[1] = tuple_index(ab, index=0, id=411, pos=[(1,2205,45)])
  literal.412: bits[1] = literal(value=0, id=412, pos=[(1,2205,57)])
  c_sign__2: bits[1] = tuple_index(c, index=0, id=416, pos=[(1,2206,35)])
  literal.417: bits[1] = literal(value=0, id=417, pos=[(1,2206,47)])
  ab_sign__3: bits[1] = tuple_index(ab, index=0, id=424, pos=[(1,2212,31)])
  literal.425: bits[1] = literal(value=1, id=425, pos=[(1,2212,43)])
  c_sign__3: bits[1] = tuple_index(c, index=0, id=429, pos=[(1,2213,21)])
  literal.430: bits[1] = literal(value=1, id=430, pos=[(1,2213,33)])
  slt.387: bits[1] = slt(bexp__1, literal.386, id=387, pos=[(1,2185,14)])
  bit_slice.389: bits[9] = bit_slice(bexp__1, start=0, width=9, id=389)
  literal.388: bits[9] = literal(value=0, id=388, pos=[(1,2185,53)])
  bit_slice.374: bits[26] = bit_slice(sub.373, start=0, width=26, id=374)
  and.277: bits[1] = and(literal.273, eq.276, id=277)
  eq.280: bits[1] = eq(literal.279, tuple_index.278, id=280)
  and.268: bits[1] = and(literal.264, eq.267, id=268)
  literal.270: bits[1] = literal(value=1, id=270, pos=[(1,2125,11)])
  invoke.410: bits[1] = invoke(ab, to_apply=__apfloat__is_product_inf__9_16, id=410, pos=[(1,2205,35)])
  eq.413: bits[1] = eq(ab_sign__2, literal.412, id=413, pos=[(1,2205,51)])
  invoke.415: bits[1] = invoke(c, to_apply=__apfloat__is_inf__8_7, id=415, pos=[(1,2206,27)])
  eq.418: bits[1] = eq(c_sign__2, literal.417, id=418, pos=[(1,2206,41)])
  invoke.423: bits[1] = invoke(ab, to_apply=__apfloat__is_product_inf__9_16, id=423, pos=[(1,2212,21)])
  eq.426: bits[1] = eq(ab_sign__3, literal.425, id=426, pos=[(1,2212,37)])
  invoke.428: bits[1] = invoke(c, to_apply=__apfloat__is_inf__8_7, id=428, pos=[(1,2213,13)])
  eq.431: bits[1] = eq(c_sign__3, literal.430, id=431, pos=[(1,2213,27)])
  invoke.395: bits[8] = invoke(to_apply=__std__mask_bits__8, id=395, pos=[(1,2195,36)])
  bexp__2: bits[9] = sel(slt.387, cases=[bit_slice.389, literal.388], id=390, pos=[(1,2185,6)])
  literal.391: bits[9] = literal(value=0, id=391, pos=[(1,2191,49)])
  shrl.375: bits[26] = shrl(rounded_fraction, bit_slice.374, id=375, pos=[(1,2176,24)])
  and.281: bits[1] = and(and.277, eq.280, id=281)
  and.271: bits[1] = and(and.268, literal.270, id=271)
  and.414: bits[1] = and(invoke.410, eq.413, id=414, pos=[(1,2205,40)])
  and.419: bits[1] = and(invoke.415, eq.418, id=419, pos=[(1,2206,31)])
  and.427: bits[1] = and(invoke.423, eq.426, id=427, pos=[(1,2212,26)])
  and.432: bits[1] = and(invoke.428, eq.431, id=432, pos=[(1,2213,17)])
  saturated_exp: bits[9] = zero_ext(invoke.395, new_bit_count=9, id=396)
  eq.392: bits[1] = eq(bexp__2, literal.391, id=392, pos=[(1,2191,32)])
  result_fraction: bits[7] = bit_slice(shrl.375, start=0, width=7, id=376)
  literal.393: bits[7] = literal(value=0, id=393, pos=[(1,2191,69)])
  or.341: bits[1] = or(and.318, and.327, and.336, id=341)
  concat.284: bits[2] = concat(and.281, and.271, id=284)
  invoke.434: bits[1] = invoke(ab, to_apply=__apfloat__is_product_nan__9_16, id=434, pos=[(1,2214,36)])
  invoke.435: bits[1] = invoke(c, to_apply=__apfloat__is_nan__8_7, id=435, pos=[(1,2215,12)])
  has_pos_inf: bits[1] = or(and.414, and.419, id=420, pos=[(1,2205,61)])
  has_neg_inf: bits[1] = or(and.427, and.432, id=433, pos=[(1,2212,47)])
  invoke.404: bits[1] = invoke(ab, to_apply=__apfloat__is_product_inf__9_16, id=404, pos=[(1,2201,37)])
  invoke.405: bits[1] = invoke(c, to_apply=__apfloat__is_inf__8_7, id=405, pos=[(1,2201,50)])
  ult.401: bits[1] = ult(bexp__2, saturated_exp, id=401, pos=[(1,2198,27)])
  max_exp: bits[8] = invoke(to_apply=__std__mask_bits__8, id=397, pos=[(1,2196,30)])
  bit_slice.402: bits[8] = bit_slice(bexp__2, start=0, width=8, id=402)
  ult.398: bits[1] = ult(bexp__2, saturated_exp, id=398, pos=[(1,2197,32)])
  literal.399: bits[7] = literal(value=0, id=399, pos=[(1,2197,91)])
  result_fraction__1: bits[7] = sel(eq.392, cases=[result_fraction, literal.393], id=394, pos=[(1,2191,24)])
  literal.441: bits[32] = literal(value=4, id=441, pos=[(1,2219,48)])
  not.342: bits[1] = not(or.341, id=342)
  one_hot.285: bits[3] = one_hot(concat.284, lsb_prio=true, id=285)
  literal.272: bits[1] = literal(value=0, id=272, pos=[(1,2125,20)])
  not.282: bits[1] = not(greater_sign, id=282, pos=[(1,2126,21)])
  or.436: bits[1] = or(invoke.434, invoke.435, id=436, pos=[(1,2214,41)])
  and.437: bits[1] = and(has_pos_inf, has_neg_inf, id=437, pos=[(1,2215,31)])
  is_operand_inf: bits[1] = or(invoke.404, invoke.405, id=406, pos=[(1,2201,42)])
  result_exp: bits[8] = sel(ult.401, cases=[max_exp, bit_slice.402], id=403, pos=[(1,2198,19)])
  result_fraction__2: bits[7] = sel(ult.398, cases=[literal.399, result_fraction__1], id=400, pos=[(1,2197,24)])
  literal.408: bits[7] = literal(value=0, id=408, pos=[(1,2203,60)])
  literal.440: bits[7] = literal(value=1, id=440, pos=[(1,2219,24)])
  sub.442: bits[32] = sub(FRACTION_SZ, literal.441, id=442, pos=[(1,2219,42)])
  and.343: bits[1] = and(__activated, not.342, id=343)
  result_sign: bits[1] = one_hot_sel(one_hot.285, cases=[literal.272, not.282, greater_sign], id=286)
  not.421: bits[1] = not(has_pos_inf, id=421, pos=[(1,2207,40)])
  is_result_nan: bits[1] = or(or.436, and.437, id=438, pos=[(1,2215,16)])
  result_exp__1: bits[8] = sel(is_operand_inf, cases=[result_exp, max_exp], id=407, pos=[(1,2202,19)])
  result_fraction__3: bits[7] = sel(is_operand_inf, cases=[result_fraction__2, literal.408], id=409, pos=[(1,2203,24)])
  shll.443: bits[7] = shll(literal.440, sub.442, id=443, pos=[(1,2219,26)])
  not.344: bits[1] = not(and.343, id=344)
  result_sign__1: bits[1] = sel(is_operand_inf, cases=[result_sign, not.421], id=422, pos=[(1,2207,20)])
  literal.445: bits[1] = literal(value=0, id=445, pos=[(1,2223,42)])
  result_exp__2: bits[8] = sel(is_result_nan, cases=[result_exp__1, max_exp], id=439, pos=[(1,2216,19)])
  result_fraction__4: bits[7] = sel(is_result_nan, cases=[result_fraction__3, shll.443], id=444, pos=[(1,2218,6)])
  EXP_SZ: bits[32] = literal(value=8, id=165, pos=[(1,2059,11)])
  literal.167: bits[32] = literal(value=1, id=167, pos=[(1,2064,37)])
  literal.177: bits[32] = literal(value=1, id=177, pos=[(1,2070,54)])
  assert.345: token = assert(__token, not.344, message="Assertion failure via fail! @ /home/proppy/xls-env/share/xls/xls/dslx/ir_convert/ir_converter_main.runfiles/com_google_xls/xls/dslx/stdlib/apfloat.x:2152:15-2152:56", label="carry_and_cancel", id=345)
  result_sign__2: bits[1] = sel(is_result_nan, cases=[result_sign__1, literal.445], id=446, pos=[(1,2223,20)])
  zero_ext.448: bits[8] = zero_ext(result_exp__2, new_bit_count=8, id=448)
  zero_ext.449: bits[7] = zero_ext(result_fraction__4, new_bit_count=7, id=449)
  EXP_CARRY: bits[32] = add(EXP_SZ, literal.167, id=168, pos=[(1,2064,31)])
  literal.169: bits[32] = literal(value=1, id=169, pos=[(1,2066,45)])
  WIDE_FRACTION_CARRY: bits[32] = add(WIDE_FRACTION, literal.177, id=178, pos=[(1,2070,48)])
  literal.179: bits[32] = literal(value=1, id=179, pos=[(1,2072,65)])
  literal.182: bits[32] = literal(value=1, id=182, pos=[(1,2078,69)])
  after_all.451: token = after_all(assert.345, id=451)
  tuple.450: (bits[1], bits[8], bits[7]) = tuple(result_sign__2, zero_ext.448, zero_ext.449, id=450, pos=[(1,2226,30)])
  EXP_SIGN_CARRY: bits[32] = add(EXP_CARRY, literal.169, id=170, pos=[(1,2066,39)])
  WIDE_FRACTION_SIGN_CARRY: bits[32] = add(WIDE_FRACTION_CARRY, literal.179, id=180, pos=[(1,2072,59)])
  WIDE_FRACTION_TOP_ROUNDING: bits[32] = sub(WIDE_FRACTION_LOW_BIT, literal.182, id=183, pos=[(1,2078,63)])
  tuple_index.269: bits[1] = tuple_index(tuple.263, index=1, id=269)
  literal.283: bits[1] = literal(value=1, id=283, pos=[(1,2127,4)])
  literal.338: bits[1] = literal(value=1, id=338, pos=[(1,2151,4)])
  literal.339: bits[8][16] = literal(value=[99, 97, 114, 114, 121, 95, 97, 110, 100, 95, 99, 97, 110, 99, 101, 108], id=339, pos=[(1,2151,15)])
  is_result_inf: bits[1] = or(has_pos_inf, has_neg_inf, id=447, pos=[(1,2224,34)])
  ret tuple.452: (token, (bits[1], bits[8], bits[7])) = tuple(after_all.451, tuple.450, id=452)
}

fn __apfloat__zero__8_7(sign: bits[1]) -> (bits[1], bits[8], bits[7]) {
  literal.456: bits[8] = literal(value=0, id=456, pos=[(1,119,23)])
  literal.457: bits[7] = literal(value=0, id=457, pos=[(1,120,32)])
  EXP_SZ: bits[32] = literal(value=8, id=454, pos=[(1,115,12)])
  FRACTION_SZ: bits[32] = literal(value=7, id=455, pos=[(1,115,24)])
  ret tuple.458: (bits[1], bits[8], bits[7]) = tuple(sign, literal.456, literal.457, id=458, pos=[(1,117,30)])
}

top proc __fmac__fmac_0_next(__token: token, __state: (bits[1], bits[8], bits[7]), init={(0, 0, 0)}) {
  receive.464: (token, (bits[1], bits[8], bits[7])) = receive(__token, channel=fmac__input_a, id=464)
  receive.468: (token, (bits[1], bits[8], bits[7])) = receive(__token, channel=fmac__input_b, id=468)
  literal.461: bits[1] = literal(value=1, id=461)
  a: (bits[1], bits[8], bits[7]) = tuple_index(receive.464, index=1, id=467, pos=[(2,41,19)])
  b: (bits[1], bits[8], bits[7]) = tuple_index(receive.468, index=1, id=471, pos=[(2,42,19)])
  receive.472: (token, bits[1]) = receive(__token, channel=fmac__reset, id=472)
  invoke.476: (token, (bits[1], bits[8], bits[7])) = invoke(__token, literal.461, a, b, __state, to_apply=__itok__apfloat__fma__8_7, id=476, pos=[(2,45,30)])
  literal.479: bits[1] = literal(value=0, id=479, pos=[(2,46,49)])
  tok0: token = tuple_index(receive.464, index=0, id=466, pos=[(2,41,13)])
  tok1: token = tuple_index(receive.468, index=0, id=470, pos=[(2,42,13)])
  tok2: token = tuple_index(receive.472, index=0, id=474, pos=[(2,43,13)])
  do_reset: bits[1] = tuple_index(receive.472, index=1, id=475, pos=[(2,43,19)])
  acc: (bits[1], bits[8], bits[7]) = tuple_index(invoke.476, index=1, id=478)
  zero: (bits[1], bits[8], bits[7]) = invoke(literal.479, to_apply=__apfloat__zero__8_7, id=480, pos=[(2,46,32)])
  tok3: token = after_all(tok0, tok1, tok2, id=482)
  acc__1: (bits[1], bits[8], bits[7]) = sel(do_reset, cases=[acc, zero], id=481, pos=[(2,47,18)])
  tuple_index.465: token = tuple_index(receive.464, index=0, id=465)
  tuple_index.469: token = tuple_index(receive.468, index=0, id=469)
  tuple_index.473: token = tuple_index(receive.472, index=0, id=473)
  send.483: token = send(tok3, acc__1, channel=fmac__output, id=483)
  tuple_index.477: token = tuple_index(invoke.476, index=0, id=477)
  EXP_SZ: bits[32] = literal(value=8, id=462, pos=[(2,20,19)])
  SFD_SZ: bits[32] = literal(value=7, id=463, pos=[(2,21,19)])
  after_all.484: token = after_all(__token, tuple_index.465, tuple_index.469, tuple_index.473, tok3, send.483, tuple_index.477, id=484)
  next (after_all.484, acc__1)
}
